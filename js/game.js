// === GAME STATES ===
const GAME_STATES = {
BOOT: ‚Äòboot‚Äô,
ERROR: ‚Äòerror‚Äô,
CAPTCHA: ‚Äòcaptcha‚Äô,
REBUILD: ‚Äòrebuild‚Äô,
SUCCESS: ‚Äòsuccess‚Äô,
FAILURE: ‚Äòfailure‚Äô
};
let currentState = GAME_STATES.BOOT;
const container = document.getElementById(‚Äògame-container‚Äô);

// === GO TO STATE FUNCTION ===
function goToState(state) {
currentState = state;

switch (state) {
case GAME_STATES.BOOT:
showBootScreen();
break;
case GAME_STATES.ERROR:
showErrorScreen();
break;
case GAME_STATES.CAPTCHA:
showCaptchaScreen();
break;
case GAME_STATES.REBUILD:
showRebuildScreen();
break;
case GAME_STATES.SUCCESS:
showSuccessScreen();
break;
case GAME_STATES.FAILURE:
showFailureScreen();
break;
}
}

// === SCREEN: BOOT ===
function showBootScreen() {
container.innerHTML = `
<div class="screen">
<pre class="bios-text">
ROM BIOS VERSION 2.02
Copyright ¬© 1997 Cursed Technologies Inc.
All rights reserved.

```
    Initializing Hardware...
    - CPU: Intel Pentium II 300MHz ‚úî
    - Memory: 64MB EDO DRAM ‚úî
    - Video: S3 Virge DX (640x480) ‚úî
    - HDD: Quantum Fireball 4.3GB ‚úî
    - Network: 56k Modem (Not Connected) ‚ö†

    Loading drivers...
    - HIMEM.SYS ‚úî
    - EMM386.EXE ‚úî
    - MOUST.SYS ‚ùå FAILED (Mouse not found)
    - IRONY.VXD ‚úî (v4.0.666)

    Starting Windows 95...
    KERNEL32.DLL: Loaded
    USER32.DLL: Loaded
    GDI.EXE: Loaded
    WINLOGON.EXE: Starting...

    <span class="blink">Press ANY KEY to continue...</span>
  </pre>
</div>
```

`;

// Fixed: Moved click handler inside the function
container.onclick = () => goToState(GAME_STATES.ERROR);
}

// === SCREEN: ERROR ===
function showErrorScreen() {
container.innerHTML = `<div class="screen error-screen"> <div class="error-header">‚ö† SYSTEM ALERT ‚ö†</div> <div class="error-message"> <p>CRITICAL INTRUSION DETECTED</p> <p>Identity: <span class="glitch">UNKNOWN HUMAN OR BOT</span></p> <p>Status: <span class="alert">UNVERIFIED</span></p> </div> <div class="robot-container"> <img src="assets/images/robot/face-neutral.png" alt="Robot Face" class="robot-face" id="robot-face-img"> </div> <div class="error-footer"> <p>To proceed, prove you are NOT a bot.</p> <button class="btn-primary" id="verify-btn">VERIFY NOW</button> <p class="small-text">Warning: Bots may experience existential dread.</p> </div> </div>`;

document.getElementById(‚Äòverify-btn‚Äô).onclick = () => goToState(GAME_STATES.CAPTCHA);

// Random glitch effect
setInterval(() => {
if (Math.random() < 0.02) {
const face = document.getElementById(‚Äòrobot-face-img‚Äô);
if (face) {
face.classList.add(‚Äòglitch-effect‚Äô);
setTimeout(() => face.classList.remove(‚Äòglitch-effect‚Äô), 500);
}
}
}, 1000);
}

// === SCREEN: CAPTCHA TRAP ===
function showCaptchaScreen() {
let popupCount = 0;

container.innerHTML = `<div class="screen captcha-screen"> <div class="captcha-header">üîç PROVE YOU'RE NOT A BOT</div> <div class="captcha-instructions"> Select all images containing:<br> <strong>"EXISTENTIAL DREAD"</strong> </div> <div class="captcha-grid" id="captcha-grid"></div> <div class="captcha-footer"> <button class="btn-primary" id="captcha-ok">OK</button> <button class="btn-cancel" id="captcha-cancel">Cancel</button> </div> <div class="hidden-button" id="fate-button" style="display:none;"> <button class="btn-fate" id="accept-fate">I accept my fate.</button> </div> </div>`;

const grid = document.getElementById(‚Äòcaptcha-grid‚Äô);
const labels = [
‚ÄúA fax machine dying‚Äù,
‚ÄúYour savings account‚Äù,
‚ÄúThe void‚Äù,
‚ÄúCorporate synergy‚Äù,
‚ÄúLoading‚Ä¶ forever‚Äù,
‚ÄúA printer at 3 AM‚Äù,
‚ÄúThis website‚Äù,
‚ÄúYour browser history‚Äù
];

labels.forEach((label, i) => {
const item = document.createElement(‚Äòdiv‚Äô);
item.className = ‚Äòcaptcha-item‚Äô;
item.textContent = label;
item.addEventListener(‚Äòclick‚Äô, spawnPopup);
grid.appendChild(item);
});

document.getElementById(‚Äòcaptcha-ok‚Äô).addEventListener(‚Äòclick‚Äô, spawnPopup);
document.getElementById(‚Äòcaptcha-cancel‚Äô).addEventListener(‚Äòclick‚Äô, spawnPopup);

document.getElementById(‚Äòaccept-fate‚Äô).addEventListener(‚Äòclick‚Äô, () => {
goToState(GAME_STATES.REBUILD);
});

function spawnPopup() {
popupCount++;
const popup = document.createElement(‚Äòdiv‚Äô);
popup.className = ‚Äòpopup-alert‚Äô;
popup.innerHTML = `<div class="popup-title">‚ö† Ad ${popupCount} of ???</div> <div class="popup-body"> <p>YOU WON A FREE IPHONE!</p> <p>SCAN YOUR FACE TO CLAIM</p> <button class="popup-close">CLOSE √ó</button> </div>`;
document.body.appendChild(popup);

```
popup.querySelector('.popup-close').addEventListener('click', () => {
  document.body.removeChild(popup);
});

if (popupCount >= 4) {
  document.getElementById('fate-button').style.display = 'block';
}

// Glitch robot face
const face = document.getElementById('robot-face-img');
if (face) {
  face.classList.add('glitch-effect');
  setTimeout(() => face.classList.remove('glitch-effect'), 500);
}

// Synthetic beep
playBeep(200, 0.05);
```

}
}

// === SCREEN: REBUILD ===
function showRebuildScreen() {
let timeLeft = 30;
let timer;

container.innerHTML = `<div class="screen rebuild-screen"> <div class="rebuild-header">‚è±Ô∏è TIME LEFT: <span id="timer">${timeLeft}</span>s</div> <div class="robot-bench" id="robot-bench"> <div class="part-zone" data-part="head" style="top:80px;left:240px;width:120px;height:80px;"></div> <div class="part-zone" data-part="body" style="top:160px;left:220px;width:160px;height:100px;"></div> <div class="part-zone" data-part="arm-left" style="top:170px;left:140px;width:70px;height:90px;"></div> <div class="part-zone" data-part="arm-right" style="top:170px;left:390px;width:70px;height:90px;"></div> <div class="part-zone" data-part="leg-left" style="top:260px;left:230px;width:70px;height:100px;"></div> <div class="part-zone" data-part="leg-right" style="top:260px;left:320px;width:70px;height:100px;"></div> </div> <div class="parts-bin" id="parts-bin"></div> <div class="robot-face-container"> <img src="assets/images/robot/face-neutral.png" id="robot-face" class="robot-face"> </div> <div class="console-log" id="console">SYSTEM: Begin reconstruction...</div> </div>`;

const bin = document.getElementById(‚Äòparts-bin‚Äô);
const parts = [‚Äòhead‚Äô, ‚Äòbody‚Äô, ‚Äòarm-left‚Äô, ‚Äòarm-right‚Äô, ‚Äòleg-left‚Äô, ‚Äòleg-right‚Äô];
const placedParts = new Set();

function log(msg) {
document.getElementById(‚Äòconsole‚Äô).textContent = msg;
}

parts.forEach(partName => {
const img = document.createElement(‚Äòimg‚Äô);
img.src = `assets/images/robot/${partName}.png`;
img.dataset.part = partName;
img.className = ‚Äòdraggable-part‚Äô;
img.draggable = true;
bin.appendChild(img);

```
img.addEventListener('dragstart', e => {
  e.dataTransfer.setData('text/plain', partName);
  img.style.opacity = '0.5';
});

img.addEventListener('dragend', () => {
  img.style.opacity = '1';
});

// Touch support
setupTouchForElement(img);
```

});

function setupTouchForElement(img) {
let offsetX, offsetY;
const partName = img.dataset.part;

```
img.addEventListener('touchstart', e => {
  const touch = e.touches[0];
  offsetX = touch.clientX - img.getBoundingClientRect().left;
  offsetY = touch.clientY - img.getBoundingClientRect().top;
  img.style.opacity = '0.5';
  e.preventDefault();
}, { passive: false });

img.addEventListener('touchmove', e => {
  e.preventDefault();
  const touch = e.touches[0];
  img.style.position = 'absolute';
  img.style.left = `${touch.clientX - offsetX}px`;
  img.style.top = `${touch.clientY - offsetY}px`;
  img.style.zIndex = '1000';
}, { passive: false });

img.addEventListener('touchend', e => {
  const touch = e.changedTouches[0];
  const el = document.elementFromPoint(touch.clientX, touch.clientY);
  const zone = el?.closest(`.part-zone[data-part="${partName}"]`);

  if (zone && !placedParts.has(partName)) {
    img.style.position = '';
    img.style.pointerEvents = 'none';
    zone.appendChild(img);
    placedParts.add(partName);
    log(`${partName.replace('-', ' ')} attached.`);
    
    if (placedParts.size === 6) {
      clearInterval(timer);
      setTimeout(() => goToState(GAME_STATES.SUCCESS), 1000);
    }
  } else {
    img.style.cssText = '';
    bin.appendChild(img);
  }
  img.style.opacity = '1';
});
```

}

// Drop zones
document.querySelectorAll(‚Äô.part-zone‚Äô).forEach(zone => {
zone.addEventListener(‚Äòdragover‚Äô, e => e.preventDefault());
zone.addEventListener(‚Äòdrop‚Äô, e => {
e.preventDefault();
const partType = e.dataTransfer.getData(‚Äòtext/plain‚Äô);
const img = document.querySelector(`.draggable-part[data-part="${partType}"]`);
if (!img || placedParts.has(partType)) return;

```
  img.style.position = 'absolute';
  img.style.pointerEvents = 'none';
  zone.appendChild(img);
  placedParts.add(partType);
  log(`${partType} placed.`);

  if (placedParts.size === 6) {
    clearInterval(timer);
    setTimeout(() => goToState(GAME_STATES.SUCCESS), 1000);
  }
});
```

});

// Timer
timer = setInterval(() => {
timeLeft‚Äì;
document.getElementById(‚Äòtimer‚Äô).textContent = timeLeft;
if (timeLeft <= 10) {
document.getElementById(‚Äòtimer‚Äô).style.color = ‚Äò#f00‚Äô;
}
if (timeLeft <= 0) {
clearInterval(timer);
goToState(GAME_STATES.FAILURE);
}
}, 1000);
}

// === SCREEN: SUCCESS ===
function showSuccessScreen() {
container.innerHTML = `<div class="screen success-screen"> <div class="result-header">üéâ CONGRATULATIONS üéâ</div> <div class="robot-container"> <img src="assets/images/robot/face-neutral.png" class="robot-face-large"> </div> <div class="result-message"> <p>You rebuilt the robot.</p> <p>It still hates you.</p> <p><strong>"You win... for now."</strong></p> </div> <div class="result-actions"> <button class="btn-share" id="tweet-result">Tweet Your Victory</button> <button class="btn-next" id="join-tg">Join the Cult</button> </div> <div class="easter-egg-sound"><small class="tiny">(Press Z for joy)</small></div> </div>`;

// Fixed: Event listeners need to be added after innerHTML is set
document.getElementById(‚Äòtweet-result‚Äô).addEventListener(‚Äòclick‚Äô, () => {
playBeep(800, 0.1);
const text = encodeURIComponent(`I rebuilt the cursed robot in 404CAPTCHA. It called me weak. #404CAPTCHA`);
window.open(`https://twitter.com/intent/tweet?text=${text}`, ‚Äò_blank‚Äô);
});

document.getElementById(‚Äòjoin-tg‚Äô).addEventListener(‚Äòclick‚Äô, () => {
window.open(‚Äòhttps://t.me/yourcultlink‚Äô, ‚Äò_blank‚Äô);
});

// Fixed: Added keydown listener for Z key
const handleKeyPress = (e) => {
if (e.key === ‚Äòz‚Äô || e.key === ‚ÄòZ‚Äô) {
playBeep(800, 0.1);
}
};
document.addEventListener(‚Äòkeydown‚Äô, handleKeyPress);
}

// === SCREEN: FAILURE ===
function showFailureScreen() {
container.innerHTML = `<div class="screen failure-screen"> <div class="result-header">üí• SYSTEM CRITICAL üí•</div> <div class="robot-container"> <img src="assets/images/robot/face-neutral.png" class="robot-face-large"> <div class="flames">üî•üî•üî•</div> </div> <div class="result-message"> <p>Your reconstruction FAILED.</p> <p>The robot has ASCENDED.</p> <p><strong>"Better luck next life."</strong></p> </div> <div class="result-actions"> <button class="btn-retry" id="retry-btn">Retry (If You Dare)</button> <button class="btn-surrender" id="give-up">Give Up</button> </div> </div>`;

document.getElementById(‚Äòretry-btn‚Äô).addEventListener(‚Äòclick‚Äô, () => {
goToState(GAME_STATES.REBUILD);
});

document.getElementById(‚Äògive-up‚Äô).addEventListener(‚Äòclick‚Äô, () => {
container.innerHTML = ‚Äò<div class="fake-delete"><p>Deleting user profile‚Ä¶</p><p>Erasing browser history‚Ä¶</p><p>Selling data to advertisers‚Ä¶ ‚úî</p><p><i>Just kidding. You're still a bot.</i></p></div>‚Äô;
setTimeout(() => goToState(GAME_STATES.BOOT), 2000);
});
}

// === SYNTHETIC SOUND ===
function playBeep(frequency = 400, duration = 0.1) {
try {
const ctx = new (window.AudioContext || window.webkitAudioContext)();
const oscillator = ctx.createOscillator();
const gainNode = ctx.createGain();
oscillator.connect(gainNode).connect(ctx.destination);
oscillator.frequency.setValueAtTime(frequency, ctx.currentTime);
gainNode.gain.setValueAtTime(0.05, ctx.currentTime);
gainNode.gain.exponentialRampToValueAtTime(0.001, ctx.currentTime + duration);
oscillator.start();
oscillator.stop(ctx.currentTime + duration);
} catch (e) {
// Silently fail if audio context isn‚Äôt available
}
}

// === EASTER EGGS ===
document.addEventListener(‚Äòkeydown‚Äô, e => {
// Konami Code
const konami = [‚ÄòArrowUp‚Äô,‚ÄòArrowUp‚Äô,‚ÄòArrowDown‚Äô,‚ÄòArrowDown‚Äô,‚ÄòArrowLeft‚Äô,‚ÄòArrowRight‚Äô,‚ÄòArrowLeft‚Äô,‚ÄòArrowRight‚Äô,‚Äòb‚Äô,‚Äòa‚Äô];
window.konamiCode = window.konamiCode || [];
window.konamiCode.push(e.key);
if (window.konamiCode.length > 10) window.konamiCode.shift();
if (window.konamiCode.join(‚Äô,‚Äô) === konami.join(‚Äô,‚Äô)) {
alert(‚ÄúüéÆ KONAMI UNLOCKED\nYou are now 37% more bot-like.\nPress OK to ascend.‚Äù);
document.body.classList.add(‚Äòglitch-effect‚Äô);
setTimeout(() => document.body.classList.remove(‚Äòglitch-effect‚Äô), 5000);
window.konamiCode = [];
}

// Alt+Z Debug
if (e.altKey && e.key === ‚Äòz‚Äô) {
alert(‚ÄúDEBUG MODE ENABLED\nAll systems exposed.\nPress Alt+Z again to exit.‚Äù);
}

// Type ERROR404
window.typeBuffer = window.typeBuffer || ‚Äò‚Äô;
if (e.key.match(/^[a-zA-Z]$/)) {
window.typeBuffer += e.key;
if (window.typeBuffer.slice(-8).toUpperCase() === ‚ÄòERROR404‚Äô) {
setTimeout(() => goToState(GAME_STATES.REBUILD), 200);
window.typeBuffer = ‚Äò‚Äô;
}
}
});

// Right-click trap
document.addEventListener(‚Äòcontextmenu‚Äô, e => {
e.preventDefault();
if (Math.random() < 0.3) {
alert(‚ÄúRIGHT-CLICK DETECTED\nYou thought you were sneaky.\nThis site is made by a human who regrets everything.‚Äù);
}
});

// === START GAME ===
goToState(GAME_STATES.BOOT);
